#!/usr/bin/env python

import sys
from subprocess import check_call, PIPE, STDOUT, CalledProcessError

def run(cmd):
  print(cmd)
  try:
    check_call(cmd, shell=True, stderr=STDOUT)
  except CalledProcessError as e:
    print("%sreturn code: %s" % (format(e.output.decode()), e.returncode))
    return(e.returncode)
  return 0

def puppet_on_centos():
  cmd = """
  rpm -ivh http://yum.puppetlabs.com/puppetlabs-release-el-6.noarch.rpm && \
  yum makecache && yum -y upgrade && yum install -y puppet hiera openssh-server
  """
  return run(cmd)

def puppet_on_ubuntu():
  cmd = """
  cd /tmp/buildutils && \
  wget https://s3.amazonaws.com/pe-builds/released/3.3.1/puppet-enterprise-3.3.1-ubuntu-14.04-amd64.tar.gz && \
  tar xf puppet-enterprise* && \
  dpkg -i puppetlabs-release-trusty.deb && \
  sed -i -e 's/^deb\-src /#deb-src /g' /etc/apt/sources.list && \
  apt-get update && apt-get -y upgrade && apt-get install -y puppet hiera
  """
  return run(cmd)

def pe_on_centos():
  return run('/bin/false')

def pe_on_ubuntu():
  return run('/bin/false')

def p_valid_os(os):
  valid_oses = [ 'ubuntu', 'centos' ]
  if not os in valid_oses:
    print("Sorry, but OS \'%s\' not supported!" % (os))
    return False
  return True

def install_puppet(os_flavor):
  if p_valid_os(os_flavor):
    print("Installing Puppet FLOSS on %s..." % (os_flavor))
    if 'centos' == os_flavor:
      return puppet_on_centos()
    else:
      return puppet_on_ubuntu()
  else:
    return -1

def install_pe(os_flavor):
  if p_valid_os(os_flavor):
    print("Installing Puppet Enterprise on %s..." % (os_flavor))
    if 'centos' == os_flavor:
      return pe_on_centos()
    else:
      return pe_on_ubuntu()
  else:
    return -1

def install(puppet_flavor, os_flavor):
  if 'puppet' == puppet_flavor:
    return install_puppet(os_flavor)
  elif 'pe' == puppet_flavor:
    return install_pe(os_flavor)
  else:
    print("Invalid Puppet flavor specified: \'%s\'" % (puppet_flavor))
    return -1

def usage():
  print("Usage: install.py <puppet|pe> <ubuntu|centos>")

def main(argv):
  if 3 == len(argv):
    return(install(argv[1].lower(), argv[2].lower()))
  else:
    usage()
    return -1

if '__main__' == __name__:
  sys.exit(main(sys.argv))
